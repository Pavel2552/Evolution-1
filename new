#include <SFML/Graphics.hpp>
#include <cstdlib>
#include <ctime>
#include <algorithm>

#include "Map.h"

int main()
{
    std::vector<Object*> n(1);
    n[0] = new Map();

    sf::RenderWindow window(sf::VideoMode(1200, 1100), "SFML works!");     ///  поле
    sf::CircleShape Crc1;
    sf::CircleShape Crc2;
    sf::CircleShape Crc3;
    sf::CircleShape Crc4;

    int x = 0, y = 0, k = 0;
    std::vector<int> st;
    std::vector<int> p;

    Crc1.setRadius(60);                                                    ///  радиус
    Crc1.setPointCount(6);                                                 ///  граница
    Crc1.setFillColor(sf::Color(120, 120, 120));                           ///  цвет внутри       /* поле */
    Crc1.setOutlineColor(sf::Color(70, 70, 70));                           ///  цвет гр           
    Crc1.setOutlineThickness(5);                                           ///  толщина границы 

    Crc2.setRadius(60);                                                    ///  радиус
    Crc2.setPointCount(6);                                                 ///  граница           
    Crc2.setOutlineThickness(5);                                           ///  цвет внутри       /* стена */    
    Crc2.setFillColor(sf::Color(30, 30, 30));                              ///  цвет гр          
    Crc2.setOutlineColor(sf::Color(70, 70, 70));                           ///  толщина границы

    Crc3.setRadius(20);                                                    ///  радиус
    Crc3.setPointCount(60);                                                ///  граница           /* еда */
    Crc3.setFillColor(sf::Color(30, 160, 20));                             ///  цвет внутри

    Crc4.setRadius(40);                                                    ///  радиус
    Crc4.setPointCount(4);                                                 ///  граница           /* враг */
    Crc4.setFillColor(sf::Color(130, 30, 20));                             ///  цвет внутри

    srand(time(NULL));
    for (int i = 1; i < 100; i++) 
    {
        st.push_back(rand() % 100);
    }

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear();
        for (int i = 0; i < 100; i++) {
            
                if ((st[i] / 10) % 2 == 1)
                {
                    x = (st[i] % 10) * 114 + 57;
                }
                else
                {
                    x = (st[i] % 10) * 114;
                }
                y = (st[i] / 10) * 98;

              /*  Crc1.setPosition(i, i);
                window.draw(Crc1);*/

                Crc2.setPosition(x +50, y+50);
                window.draw(Crc2);
        }
        window.display();

    }

    return 0;
}
